<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.latte.dao.NoteDao">

	<select id="getAllNoteCategories" resultType="com.example.latte.vo.NoteCategory">
		select 
			note_category_no as no,
			note_category_name as name
		from
			latte_note_categories 
	</select>
	
	<select id="getNoteCategiryByNo" parameterType="int" resultType="com.example.latte.vo.NoteCategory">
		select 
			note_category_no as no,
			note_category_name as name
		from 
			latte_note_categories
		where 
			note_category_no = #{value} 
	</select>
	
	<update id="updateNote" parameterType="com.example.latte.vo.Note">
		update 
			latte_notes
		set 
			note_status = 'READ'
		where 
			note_no = #{no}
	</update>
	
	<delete id="deleteNoteByNo" parameterType="int">
		delete latte_notes
		where note_no = #{value}
	</delete>
	
	<insert id="insertNote" parameterType="com.example.latte.vo.Note">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select LATTE_NOTE_NO_SEQ.nextval from dual
		</selectKey>
		insert into latte_notes
			(note_no, category_no, sender_no, rec_dept_no, recipient_no, note_title, note_content)
		values
			(#{no}, #{categoryNo}, #{senderNo}, #{recDeptNo}, #{recipientNo}, #{title}, #{content})
	</insert>
	
	<select id="getNoteByNo" parameterType="int" resultType="com.example.latte.vo.Note">
		select 
			note_no as no,
			category_no as categoryNo,
			sender_no as senderNo,
			rec_dept_no as recDeptNo,
			recipient_no as recipientNo,
			note_title as title,
			note_content as content,
			note_status as status,
			note_created_date as createdDate
		from 
			latte_notes
		where 
			note_no = #{value}
	</select>
	
	<select id="getNoteDtoByNo" parameterType="int" resultType="com.example.latte.dto.NoteDto">
		select
			n.note_no as noteNo, 
			n.category_no as categoryNo, 
			c.note_category_name as categoryName, 
			n.sender_no as senderNo, 
			s.user_name as senderName, 
			s.user_nickname as senderNickNmae, 
			sd.dept_name as senderDept,
        	n.recipient_no as recNo, 
        	r.user_name recName, 
        	r.user_nickname recNickName, 
        	rd.dept_name as recDept, 
        	n.note_title as title, 
        	n.note_content as content, 
        	n.note_status as status, 
        	n.note_created_date as createdDate
		from 
			latte_note_categories C, latte_notes N, latte_users R, latte_users S, latte_depts RD, latte_depts SD
		where 
			n.category_no = c.note_category_no
		and n.sender_no = s.user_no
		and s.user_dept_no = sd.dept_no 
		and n.recipient_no = r.user_no
		and r.user_dept_no = rd.dept_no
		and n.note_no = #{value}
	</select>
	<select id="getNoteListByOpt" parameterType="map" resultType="com.example.latte.dto.NoteDto">
		select *
		from(
			select 
				row_number() over (order by note_no desc) rn,
				n.note_no as noteNo, 
				n.category_no as categoryNo,
				c.note_category_name as categoryName, 
				n.sender_no as senderNo, 
				s.user_name as senderName, 
				s.user_nickname as senderNickNmae, 
				sd.dept_name as senderDept,
	        	n.recipient_no as recNo, 
	        	r.user_name recName, 
	        	r.user_nickname recNickName, 
	        	rd.dept_name as recDept, 
	        	n.note_title as title, 
	        	n.note_content as content, 
	        	n.note_status as status, 
	        	n.note_created_date as createdDate
			from 
				latte_note_categories C, latte_notes N, latte_users R, latte_users S, latte_depts RD, latte_depts SD
			where 
				n.category_no = c.note_category_no
			and n.sender_no = s.user_no
			and s.user_dept_no = sd.dept_no 
			and n.recipient_no = r.user_no
			and r.user_dept_no = rd.dept_no
			<if test='sort.equals("normal")'>
				and n.recipient_no = #{userNo} and n.category_no != 1
			</if>
			<if test='sort.equals("friend")'>
				and n.recipient_no = #{userNo} and n.category_no = 1
			</if>
			<if test='sort.equals("send")'>
				and n.sender_no = #{userNo}
			</if>
			order by note_created_date desc
		)
		<where>
			<if test="startRn != 0 and endRn != 0">
				 rn >= #{startRn} and rn &lt;= #{endRn}
			</if>
		</where>
	</select>

	<select id="getNoteListCnt" parameterType="map" resultType="int">
		select 
			count(*)
		from 
			latte_notes
		<where>
			<if test='sort.equals("normal")'>
				recipient_no = #{userNo} and category_no != 1
			</if>
			<if test='sort.equals("friend")'>
				recipient_no = #{userNo} and category_no = 1
			</if>
			<if test='sort.equals("send")'>
				sender_no = #{userNo}
			</if>
		</where> 
	</select>
	
	<select id="getUnreadNormalNote" parameterType="int" resultType="int">
		select 
			count(*)
		from 
			latte_notes
		where 
			recipient_no = #{value}
		and 
			category_no != 1
		and 
			note_status = 'STANDBY'			
	</select>
	
	<select id="getUnreadFriendNote" parameterType="int" resultType="int">
		select 
			count(*)
		from 
			latte_notes
		where 
			recipient_no = #{value}
		and 
			category_no = 1
		and 
			note_status = 'STANDBY'			
	</select>	
</mapper>